Quantum computation result:
x=3, y=5, z=2
res = x + y + z = 10
Result type: <class 'list'>
Result: [TaggedExecutionDetails(value_type=<SavedResultValueType.ExecutionDetails: 'ExecutionDetails'>, name='result', value=ExecutionDetails(vendor_format_result={}, counts={'1010': 2048}, counts_lsb_right=True, probabilities={}, parsed_states={'1010': {'res': 10}}, histogram=None, output_qubits_map={'res': (0, 1, 2, 3)}, state_vector=None, parsed_state_vector_states=None, physical_qubits_map={'res': (17, 18, 19, 20)}, num_shots=2048, output_type_map={'res': RegisterQuantumType(quantum_types=QuantumNumeric(source_ref=None, back_ref=None, kind='qnum', size=Expression(source_ref=None, back_ref=None, expr='4'), is_signed=Expression(source_ref=None, back_ref=None, expr='False'), fraction_digits=Expression(source_ref=None, back_ref=None, expr='0')), size=4)}))]
Result values: [TaggedExecutionDetails(value_type=<SavedResultValueType.ExecutionDetails: 'ExecutionDetails'>, name='result', value=ExecutionDetails(vendor_format_result={}, counts={'1010': 2048}, counts_lsb_right=True, probabilities={}, parsed_states={'1010': {'res': 10}}, histogram=None, output_qubits_map={'res': (0, 1, 2, 3)}, state_vector=None, parsed_state_vector_states=None, physical_qubits_map={'res': (17, 18, 19, 20)}, num_shots=2048, output_type_map={'res': RegisterQuantumType(quantum_types=QuantumNumeric(source_ref=None, back_ref=None, kind='qnum', size=Expression(source_ref=None, back_ref=None, expr='4'), is_signed=Expression(source_ref=None, back_ref=None, expr='False'), fraction_digits=Expression(source_ref=None, back_ref=None, expr='0')), size=4)}))]
First result: value_type=<SavedResultValueType.ExecutionDetails: 'ExecutionDetails'> name='result' value=ExecutionDetails(vendor_format_result={}, counts={'1010': 2048}, counts_lsb_right=True, probabilities={}, parsed_states={'1010': {'res': 10}}, histogram=None, output_qubits_map={'res': (0, 1, 2, 3)}, state_vector=None, parsed_state_vector_states=None, physical_qubits_map={'res': (17, 18, 19, 20)}, num_shots=2048, output_type_map={'res': RegisterQuantumType(quantum_types=QuantumNumeric(source_ref=None, back_ref=None, kind='qnum', size=Expression(source_ref=None, back_ref=None, expr='4'), is_signed=Expression(source_ref=None, back_ref=None, expr='False'), fraction_digits=Expression(source_ref=None, back_ref=None, expr='0')), size=4)})